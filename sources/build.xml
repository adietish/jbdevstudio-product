<project default="build" name="jbds aggregate sources build.xml">
  <!-- if ${WORKSPACE}/site folder exists, target that folder; else generate here. -->
  <condition property="output.dir" value="${WORKSPACE}/results" else="${basedir}">
    <available file="${WORKSPACE}/results" />
  </condition>

  <condition property="COMMON_TOOLS" value="/home/hudson/static_build_env/jbds/tools" else="${java.io.tmpdir}">
    <available file="/home/hudson/static_build_env/jbds" type="dir" />
  </condition>
  <mkdir dir="${COMMON_TOOLS}" />

  <property name="tmpdir" value="${java.io.tmpdir}/jbds-sources-build" />

  <!-- 
      test to ensure we're unpacking the correct # of project source folders.
      number of source folders expected is derived from https://github.com/jbosstools/jbosstools-build-sites/blob/master/aggregate/site/pom.xml#L138-L157 -->
  <property name="expected.num.project.source.folders" value="17"/>

  <!-- TODO: ensure this list of excludes is accurate
    Need to exclude stuff that's only in JBT but not in JBDS.
    For list of things to include/exclude, see:
      JBDS Core Features:   product/features/*/feature.xml
      JBDS Core Site:       product/site/category.xml
  -->
  <property name="jbosstools.excludes" value="**/*birt*/**, **/*community*/**, **/org.jboss.tools.gwt*/**"/>

  <target name="get.ant-contrib" unless="ant-contrib.jar.exists">
    <property name="ANTCONTRIB_MIRROR" value="http://sourceforge.net/projects/ant-contrib/files/ant-contrib/ant-contrib-1.0b2" />
    <get usetimestamp="true" dest="${COMMON_TOOLS}/ant-contrib-1.0b2-bin.zip" src="${ANTCONTRIB_MIRROR}/ant-contrib-1.0b2-bin.zip" />
    <touch file="${COMMON_TOOLS}/ant-contrib-1.0b2-bin.zip" />
    <mkdir dir="${java.io.tmpdir}/ant-contrib-1.0b2-bin.zip_" />
    <unzip src="${COMMON_TOOLS}/ant-contrib-1.0b2-bin.zip" dest="${java.io.tmpdir}/ant-contrib-1.0b2-bin.zip_" overwrite="true" />
    <copy file="${java.io.tmpdir}/ant-contrib-1.0b2-bin.zip_/ant-contrib/lib/ant-contrib.jar" tofile="${COMMON_TOOLS}/ant-contrib.jar" failonerror="true" />
    <delete dir="${java.io.tmpdir}/ant-contrib-1.0b2-bin.zip_" includeemptydirs="true" quiet="true" />
  </target>

  <target name="init">
    <echo level="verbose">
This script requires Ant 1.8+ and JDK 1.6+.
-------------------------------------------
$ant.version = ${ant.version}
$ant.home = ${ant.home}
$ant.java.version = ${ant.java.version}
$java.home = ${java.home}</echo>
    <available file="${COMMON_TOOLS}/ant-contrib.jar" type="file" property="ant-contrib.jar.exists" />
    <antcall target="get.ant-contrib" />
    <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
        <pathelement location="${COMMON_TOOLS}/ant-contrib.jar" />
      </classpath>
    </taskdef>

    <mkdir dir="${tmpdir}" />
    <delete dir="target/" quiet="true" />
    <mkdir dir="target/" />
  </target>

  <target name="build" depends="init">
    <!-- get timestamp from upstream installer build (units.unit.id = Alpha2-v20130326-1416-B6969.jbds) instead of maven since tycho and pure maven don't use the same value -->
    <if>
      <available file="../installer/target/p2content.xml"/>
      <then>
        <xmlproperty file="../installer/target/p2content.xml" collapseAttributes="true"/>
        <propertyregex property="update.site.qualifier" defaultvalue="${units.unit.id}" input="${units.unit.id}" regexp=".jbds" replace="" override="true" />
      </then>
      <else>
        <if>
          <isset property="BUILD_NUMBER"/>
          <then>
            <var name="update.site.qualifier" value="${update.site.qualifier}-B${BUILD_NUMBER}"/>
          </then>
        </if>
      </else>
    </if>

    <propertyregex property="update.site.version" defaultvalue="${project.version}" input="${project.version}" regexp="-SNAPSHOT" replace="" override="true" />
    <property name="sourcesZipRootFolder" value="jboss-devstudio-${update.site.version}.${BUILD_ALIAS}-installer-src"/>
    <property name="sourcesZip" value="target/${sourcesZipRootFolder}.zip" />

    <antcallback target="getSourcesSHA" return="sourcesSHA"/>
    <antcall target="get.local.sources" />
    <antcallback target="get.jbosstools-src.zip" return="jbosstools-src.zip.filename" />
    <antcall target="cleanup" />
  </target>

<!--
    From: http://stackoverflow.com/questions/5313438/ant-read-existing-manifest-version-and-append-to-it

    Loads entries from a manifest file.

    @jar     The jar from where to read
    @file    A manifest file to read
    @prefix  A prefix to prepend
    @section The name of the manifest section to load
-->
<scriptdef name="loadmf" language="javascript" loaderRef="sharedbuild-loaderRef">
    <attribute name="jar" />
    <attribute name="file" />
    <attribute name="prefix" />
    <attribute name="section" />
    <![CDATA[
        var jarname = attributes.get("jar");
        var filename = attributes.get("file");
        if (jarname != null && filename != null) {
            self.fail("Only one of jar or file is required");
        }
        var prefix = attributes.get("prefix");
        if (prefix == null) {
            prefix = "";
        }
        var section = attributes.get("section");

        var manifest;
        if (jarname != null) {
            var jarfile = new java.util.jar.JarFile(new java.io.File(jarname));
            manifest = jarfile.getManifest();
        } else if (filename != null) {
            manifest = new java.util.jar.Manifest(new java.io.FileInputStream(new java.io.File(filename)));
        } else {
            self.fail("One of jar or file is required");
        }

        if (manifest == null) {
            self.log("No manifest in " + jar);
        } else {
            var attributes = (section == null) ? manifest.getMainAttributes() : manifest.getAttributes(section);
            if (attributes != null) {
                var iter = attributes.entrySet().iterator();
                while (iter.hasNext()) {
                    var entry = iter.next();
                    project.setProperty(prefix + entry.getKey(), entry.getValue());
                }
            }
        }
    ]]>
</scriptdef>

  <target name="getSourcesSHA">
    <!-- 
      $➔ unzip -d /tmp/ ../site/target/repository/plugins/com.jboss.devstudio.core_9.0.0.Beta1-v20150511-1448.jar META-INF/MANIFEST.MF
      Archive:  ../site/target/repository/plugins/com.jboss.devstudio.core_9.0.0.Beta1-v20150511-1448.jar
      inflating: /tmp/META-INF/MANIFEST.MF  
    $➔ cat /tmp/META-INF/MANIFEST.MF | grep Eclipse-SourceReferences -A3
    Eclipse-SourceReferences: scm:git:https://github.com/jbdevstudio/jbdev
     studio-product.git;path="plugins/com.jboss.devstudio.core";commitId=4
     0da994ce9f35dbf0f08b146cd924e83ebf49ab3

     return: 40da994ce9f35dbf0f08b146cd924e83ebf49ab3
    -->
    <var name="sourcesSHA" value="SHAZAM"/>
    <resourcecount property="num.MANIFEST.MFs">
       <fileset dir="../site/target/repository/plugins/" includes="**/com.jboss.devstudio.core_*.jar" id="core_MANIFEST.MF"/>
    </resourcecount>
    <for param="jar">
      <path>
       <fileset refid="core_MANIFEST.MF"/>
      </path>
      <sequential>
        <!-- <echo>@{jar}</echo> -->
        <loadmf jar="@{jar}" prefix="com.jboss.devstudio.core."/>
        <!-- <echoproperties prefix="com.jboss.devstudio.core.Eclipse-SourceReferences"/> -->
      </sequential>
    </for>
    <propertyregex property="sourcesSHA" input="${com.jboss.devstudio.core.Eclipse-SourceReferences}" regexp=".+;commitId=(.+)" replace="\1" defaultValue="00000000" override="true"/>
    <!-- <echo>${sourcesSHA}</echo> -->
  </target>

  <target name="get.local.sources">
    <zip destfile="${sourcesZip}" duplicate="preserve"  whenempty="fail">
      <zipfileset dir="${basedir}/../" prefix="${sourcesZipRootFolder}/jbdevstudio-product-${sourcesSHA}" excludes="**/.git, **/installer/src/**, **/installer/tools/lib/**, **/workspace/**, **/target*/**, **/build/**, **/*.class, **/*.zip, **/.jar, **/jbds-echoproperties.txt" />
      <!-- JBDS-2456 in order to make JBDS buildable, need to include p2-director.zip -->
      <zipfileset dir="${basedir}/../installer" prefix="${sourcesZipRootFolder}/jbdevstudio-product-${sourcesSHA}/installer" includes="p2-director.zip" />
      <zipfileset dir="${basedir}/../installer/src" prefix="${sourcesZipRootFolder}/jbdevstudio-product-${sourcesSHA}/installer/src" includes="**" />
      <zipfileset dir="${basedir}/../installer/tools/lib" prefix="${sourcesZipRootFolder}/jbdevstudio-product-${sourcesSHA}/installer/tools/lib" includes="**" />
    </zip>
  </target>

  <!-- NOTE: after staging a build, latest/all/ folder no longer exists so need to override to find upstream or build fails.
  mvn install -Djbosstools-site=http://download.jboss.org/jbosstools/builds/staging/jbosstools-4.2.3.Final-build-core/2015-03-01_13-40-40-B357/all/
  -->
  <target name="get.jbosstools-src.zip">
    <!-- given http://download.jboss.org/jbosstools/updates/nightly/core/4.3.mars/, want http://download.jboss.org/jbosstools/builds/nightly/core/4.3.mars/latest/all/ -->
    <propertyregex property="inputBuild" input="${inputRepo}" regexp="updates/(.+)" replace="builds/\1/latest/all/" defaultValue="${inputRepo}"/>
    <!-- given http://download.jboss.org/jbosstools/mars/snapshots/builds/jbosstools-build-sites.aggregate.site_master/latest/all/repo/ want  http://download.jboss.org/jbosstools/mars/snapshots/builds/jbosstools-build-sites.aggregate.site_master/latest/all/ -->
    <propertyregex property="inputBuild" input="${inputBuild}" regexp="(.+)/repo/+" replace="\1" defaultValue="${inputBuild}" override="true"/>
    <echo level="verbose">[INFO] inputRepo = ${inputRepo}</echo>
    <echo>[INFO] Searching for *-src.zip in ${inputBuild} ...</echo>
    <if>
      <isset property="inputBuild"/>
      <then>
        <!-- get the source zip filename from apache dir listing of http://download.jboss.org/jbosstools/builds/nightly/core/master/latest/all/ -->
        <get usetimestamp="true" ignoreerrors="true" src="${inputBuild}" dest="${tmpdir}/zip.list.html" />
        <!-- get the line of XML from the listing -->
        <loadfile property="jbosstools-src.zip.filename" srcfile="${tmpdir}/zip.list.html">
          <filterchain>
            <linecontains>
              <!-- extract only the line of HTML for the src.zip, not the MD5 file -->
              <contains value="-src.zip&quot;"></contains>
            </linecontains>
            <tokenfilter>
              <!-- extract ...href="jbosstools-build-sites.aggregate.site_master-SNAPSHOT-src.zip"... to jbosstools-build-sites.aggregate.site_master-SNAPSHOT-src.zip -->
              <replaceregex pattern=".+href=&quot;([^&quot;]+)&quot;.+" replace="\1" flags="gi"/>
            </tokenfilter>
            <!-- remove newline from the filename -->
            <striplinebreaks/>
          </filterchain>
        </loadfile>
        <!-- this should warn if the zip can't be downloaded or if the zipfileset is empty -->
        <if>
          <isset property="jbosstools-src.zip.filename"/>
          <then>
            <echo message="[INFO] JBT Source zip: ${jbosstools-src.zip.filename}"/>
            <delete includeemptydirs="true" quiet="true">
              <fileset dir="${tmpdir}/${jbosstools-src.zip.filename}.unpacked" />
            </delete>
            <get usetimestamp="true" ignoreerrors="true" src="${inputBuild}/${jbosstools-src.zip.filename}" dest="${tmpdir}/${jbosstools-src.zip.filename}" />
            <unzip src="${tmpdir}/${jbosstools-src.zip.filename}" dest="${tmpdir}/${jbosstools-src.zip.filename}.unpacked" overwrite="true"/>
            
            <resourcecount property="num.project.source.root.folders">
               <dirset dir="${tmpdir}/${jbosstools-src.zip.filename}.unpacked" includes="jbosstools-*-src" id="source-root-folder"/>
            </resourcecount>
            <echo level="verbose" message="Found this source root folder in ${jbosstools-src.zip.filename}:"/>
            <for param="subdir">
              <path>
               <dirset refid="source-root-folder"/>
              </path>
              <sequential>
                <var name="jbosstoolsSourcesZipRootFolder" unset="true"/>
                <basename file="@{subdir}" property="jbosstoolsSourcesZipRootFolder" />
                <echo level="verbose" message="${jbosstoolsSourcesZipRootFolder}"/>
              </sequential>
            </for>

            <var name="num.project.source.folders" unset="true"/>
            <resourcecount property="num.project.source.folders">
               <dirset dir="${tmpdir}/${jbosstools-src.zip.filename}.unpacked" includes="${jbosstoolsSourcesZipRootFolder}/jbosstools-*-*" id="source-folders"/>
            </resourcecount>
            <echo message="Found these project source folders in ${jbosstools-src.zip.filename}:"/>
            <for param="subdir">
              <path>
               <dirset refid="source-folders"/>
              </path>
              <sequential>
                <var name="name" unset="true"/>
                <basename file="@{subdir}" property="name" />
                <echo message="${name}"/>
              </sequential>
            </for>
            <if>
                <isgreaterthan arg1="${num.project.source.folders}" arg2="${expected.num.project.source.folders}"/>
              <then>
                <echo message="Warning: Found ${num.project.source.folders} project source folders, expected ${expected.num.project.source.folders}."/>
              </then>
              <else>
                <if>
                  <isgreaterthan arg2="${num.project.source.folders}" arg1="${expected.num.project.source.folders}"/>
                  <then>
                    <fail message="Error: Found ${num.project.source.folders} project source folders, expected ${expected.num.project.source.folders}."/>
                  </then>
                </if>
              </else>
            </if>

            <zip destfile="${sourcesZip}" update="true" whenempty="fail">
              <zipfileset dir="${tmpdir}/${jbosstools-src.zip.filename}.unpacked/${jbosstoolsSourcesZipRootFolder}/" prefix="${sourcesZipRootFolder}/" excludes="${jbosstools.excludes}"/>
            </zip>
          </then>
          <else>
            <echo>[WARNING] No nightly build folder could be found from which to fetch sources for -Djbosstools-site=${inputRepo}</echo>
          </else>
        </if>
      </then>
    </if>
  </target>

  <target name="cleanup">
    <delete includeemptydirs="true" quiet="true">
      <fileset dir="${tmpdir}" />
    </delete>
  </target>

</project>
